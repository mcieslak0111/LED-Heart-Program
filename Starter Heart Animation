/* Animation firmware for ATTiny85 heart-shaped 
 * PCB for Penn State Harrisburg IEEE club Valentine's day
 * soldering workshop. 
 *
 * Uses charlieplexed scheme to drive 20 LEDs
 * 
 * Note: Gettting blinks on LED 20 and LED 13 lighting dimmly before it should be on
 *
 * Created 2 Feb 2023 
 * Michael Cieslak, Zach Martin
 */

#include <avr/io.h>
#include <util/delay.h>

#define LINE_A 0 //Pin 5 (PB0) on ATtiny85
#define LINE_B 1 //Pin 6 (PB1) on ATtiny85
#define LINE_C 2 //Pin 7 (PB2) on ATtiny85
#define LINE_D 3 //Pin 2 (PB3) on ATtiny85
#define LINE_E 4 //Pin 3 (PB4) on ATtiny85

// arrays to set the brightness of each led (same order as on board 1-20)
char led_grid[20] = {
  000 , 000 , 000 , 000 , 000 ,
  000 , 000 , 000 , 000 , 000 ,
  000 , 000 , 000 , 000 , 000 ,
  000 , 000 , 000 , 000 , 000
};
// use this array to create the next frame
char led_grid_next[20] = {
  000 , 000 , 000 , 000 , 000 ,
  000 , 000 , 000 , 000 , 000 ,
  000 , 000 , 000 , 000 , 000 ,
  000 , 000 , 000 , 000 , 000
};

int main(void) {
  
  led_sequential();
  
}

void led_sequential(void){

  char led;

  // continually loops and updates the LEDs
  while(1){
    int f;
    
    //fade to all-on LED grid
    for ( led=0; led<=19; led++ ) { led_grid_next[led] = 100; }
    fade_to_next_frame();
    // keeps the current state on for a bit
    for( f=0 ; f<1500 ; f++ ){
      draw_frame();
    }
    
    //fade to no LEDs ON
    initial_config();
    fade_to_next_frame();
    
    // keeps the current state on for a bit
    for( f=0 ; f<1000 ; f++ ){
      draw_frame();
    }

    // Turn the first LED ON
    led_grid_next[0] = 100;
    fade_to_next_frame();
    

    // loop that keeps the LEDs lit and sequentially lights up the next LED
    while(1){

      // keeps the current state on for a bit
      for( f=0 ; f<300 ; f++ ){
        draw_frame();
      }

      // light up the next LED if possible
      generate_next_led();     
      
      if( current_equals_next() == 1 ){
        //next generated frame is the same as the current frame... "still life" achieved
        for( f=0 ; f<1500 ; f++ ){ draw_frame(); } //stay on frame for awhile
        break; //exit this loop & start over
      }
      
      fade_to_next_frame();
    }
    
    
  }

}


void initial_config(void){
  for(int i=0; i<20; i++){
    led_grid_next[i] = 0;
  }
  return;
}

// Generate next LED
void generate_next_led(void){
 
  int second_side = 19;
  for(int i=1; i<11; i++){
    if(led_grid[i] == 0){
      led_grid_next[i] = 100;
      led_grid_next[second_side] = 100;
      return;
    }
    
    second_side--;
  }
  
  return;
} 

// function that checks if the LED states changed
char current_equals_next(){
  char led;
  for(led=0;led<=19;led++){
    if( led_grid[led] != led_grid_next[led] ){ return 0; } //a difference was found, return 0 (for False)
  }
  return 1; //no differences found, return 1 (for True)
}

// This sets up two pins as outputs to light one LED
//DDRB direction config for each LED (1 = output)
const char led_dir[20] = {
  ( 1<<LINE_A | 1<<LINE_E ), //LED 0
  ( 1<<LINE_A | 1<<LINE_D ), //LED 1
  ( 1<<LINE_A | 1<<LINE_C ), //LED 2
  ( 1<<LINE_A | 1<<LINE_B ), //LED 3
  
  ( 1<<LINE_B | 1<<LINE_E ), //LED 4
  ( 1<<LINE_B | 1<<LINE_D ), //LED 5
  ( 1<<LINE_B | 1<<LINE_C ), //LED 6
  ( 1<<LINE_B | 1<<LINE_A ), //LED 7
  
  ( 1<<LINE_C | 1<<LINE_E ), //LED 8
  ( 1<<LINE_C | 1<<LINE_D ), //LED 9
  ( 1<<LINE_C | 1<<LINE_B ), //LED 10
  ( 1<<LINE_C | 1<<LINE_A ), //LED 11
  
  ( 1<<LINE_D | 1<<LINE_E ), //LED 12
  ( 1<<LINE_D | 1<<LINE_C ), //LED 13
  ( 1<<LINE_D | 1<<LINE_B ), //LED 14
  ( 1<<LINE_D | 1<<LINE_A ), //LED 15
  
  ( 1<<LINE_E | 1<<LINE_D ), //LED 16
  ( 1<<LINE_E | 1<<LINE_C ), //LED 17
  ( 1<<LINE_E | 1<<LINE_B ), //LED 18
  ( 1<<LINE_E | 1<<LINE_A )  //LED 19
};

// This Defines which pin should be high to light an LED
//PORTB output config for each LED (1 = High, 0 = Low)
const char led_out[20] = {
  ( 1<<LINE_A ), //LED 0
  ( 1<<LINE_A ), //LED 1
  ( 1<<LINE_A ), //LED 2
  ( 1<<LINE_A ), //LED 3
  
  ( 1<<LINE_B ), //LED 4
  ( 1<<LINE_B ), //LED 5
  ( 1<<LINE_B ), //LED 6
  ( 1<<LINE_B ), //LED 7
  
  ( 1<<LINE_C ), //LED 8
  ( 1<<LINE_C ), //LED 9
  ( 1<<LINE_C ), //LED 10
  ( 1<<LINE_C ), //LED 11
  
  ( 1<<LINE_D ), //LED 12
  ( 1<<LINE_D ), //LED 13
  ( 1<<LINE_D ), //LED 14
  ( 1<<LINE_D ), //LED 15
  
  ( 1<<LINE_E ), //LED 16
  ( 1<<LINE_E ), //LED 17
  ( 1<<LINE_E ), //LED 18
  ( 1<<LINE_E ) //LED 19
};

void light_led(char led_num) { //led_num must be from 0 to 19
  DDRB = led_dir[led_num];
  PORTB = led_out[led_num];
}

void leds_off() {
  DDRB = 0;
  PORTB = 0;  
}

void draw_frame(void){
  char led, bright_val, b;
  for ( led=0; led<=19; led++ ) {
    //software PWM
    bright_val = led_grid[led];
    for( b=0 ; b < bright_val ; b+=4 ) { light_led(led); } //delay while on
    for( b=bright_val ; b<100 ; b+=4 ) { leds_off(); } //delay while off
  }
}

void fade_to_next_frame(void){
  char led, changes;  
  
  while(1){
    changes = 0;
    for ( led=0; led<=19; led++ ) {
      if( led_grid[led] < led_grid_next[led] ){ led_grid[led] = (led_grid[led]+1); changes++; }
      if( led_grid[led] > led_grid_next[led] ){ led_grid[led] = (led_grid[led]-1); changes++; }
    }
    draw_frame();
    if( changes == 0 ){break;}
  }
}

/*
 * pseudorandom - From Instructables: http://www.instructables.com/id/Flickering-LED-Candle/
 * return the next pseudo-random number (PRN) using a standard maximum
 * length xor-feedback 16-bit shift register.
 * This returns the number from 1 to 65535 in a fixed but apparently
 * random sequence.  No one number repeats.
 */
 
uint16_t randreg = 222; //seed value

static uint16_t pseudorandom16 (void)
{
    uint16_t newbit = 0;

    if (randreg == 0) {
        randreg = 1;
    }
    if (randreg & 0x8000) newbit = 1;
    if (randreg & 0x4000) newbit ^= 1;
    if (randreg & 0x1000) newbit ^= 1;
    if (randreg & 0x0008) newbit ^= 1;
    randreg = (randreg << 1) + newbit;
    return randreg;
}

void set_random_next_frame(void){
  char i;
  
  //clear LED Grid
  for ( i=0; i<=19; i++ ) {
    led_grid_next[i] = 0;
  }
  
  char total, cell;
  total = ((pseudorandom16() % 16)+5); //yield random from 5 to 20
  
  //set random cells
  for( i=0 ; i<total ; i++ ) {
    cell = (pseudorandom16() % 20);
    led_grid_next[cell] = 100;
  }
}
